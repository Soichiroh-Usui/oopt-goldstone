diff --git a/sonic-xcvrd/xcvrd/xcvrd.py b/sonic-xcvrd/xcvrd/xcvrd.py
index 253f03c..e5d1b51 100644
--- a/sonic-xcvrd/xcvrd/xcvrd.py
+++ b/sonic-xcvrd/xcvrd/xcvrd.py
@@ -54,7 +54,7 @@ MGMT_INIT_TIME_DELAY_SECS = 2
 # SFP insert event poll duration
 SFP_INSERT_EVENT_POLL_PERIOD_MSECS = 1000
 
-DOM_INFO_UPDATE_PERIOD_SECS = 60
+DOM_INFO_UPDATE_PERIOD_SECS = 1
 STATE_MACHINE_UPDATE_PERIOD_MSECS = 60000
 TIME_FOR_SFP_READY_SECS = 1
 
@@ -153,8 +153,8 @@ def _wrapper_get_presence(physical_port):
     if platform_chassis is not None:
         try:
             return platform_chassis.get_sfp(physical_port).get_presence()
-        except NotImplementedError:
-            pass
+        except (NotImplementedError, Exception):
+            return False
     return platform_sfputil.get_presence(physical_port)
 
 
@@ -162,35 +162,53 @@ def _wrapper_is_replaceable(physical_port):
     if platform_chassis is not None:
         try:
             return platform_chassis.get_sfp(physical_port).is_replaceable()
-        except NotImplementedError:
-            pass
+        except (NotImplementedError, Exception):
+            return False
     return False
 
 
 def _wrapper_get_transceiver_info(physical_port):
     if platform_chassis is not None:
         try:
-            return platform_chassis.get_sfp(physical_port).get_transceiver_info()
-        except NotImplementedError:
-            pass
+            sfp = platform_chassis.get_sfp(physical_port)
+            api = sfp.get_xcvr_api()
+            return api.get_transceiver_info()
+        except (NotImplementedError, Exception):
+            return None
     return platform_sfputil.get_transceiver_info_dict(physical_port)
 
 
 def _wrapper_get_transceiver_dom_info(physical_port):
     if platform_chassis is not None:
         try:
-            return platform_chassis.get_sfp(physical_port).get_transceiver_bulk_status()
-        except NotImplementedError:
-            pass
+            sfp = platform_chassis.get_sfp(physical_port)
+            api = sfp.get_xcvr_api()
+
+            dom_info_dict = api.get_transceiver_bulk_status()
+            if sfp.sfp_type == 'QSFP_DD':
+                # get module_state and dp[1-8]state
+                dom_info_dict['module_state'] = api.get_module_state()
+                dp_state_dict = api.get_datapath_state()
+                dom_info_dict.update(dp_state_dict)
+
+                # get active_appl_code[1-8]
+                for i in range(8):
+                    dom_info_dict['active_appl_code{}'.format(i+1)] = api.get_application(i)
+            return dom_info_dict
+        except (NotImplementedError, Exception):
+            return None
     return platform_sfputil.get_transceiver_dom_info_dict(physical_port)
 
 
 def _wrapper_get_transceiver_dom_threshold_info(physical_port):
     if platform_chassis is not None:
         try:
-            return platform_chassis.get_sfp(physical_port).get_transceiver_threshold_info()
-        except NotImplementedError:
-            pass
+            sfp = platform_chassis.get_sfp(physical_port)
+            api = sfp.get_xcvr_api()
+            return api.get_transceiver_threshold_info()
+        except (NotImplementedError, Exception):
+            return None
+
     return platform_sfputil.get_transceiver_dom_threshold_info_dict(physical_port)
 
 
@@ -234,8 +252,8 @@ def _wrapper_get_transceiver_change_event(timeout):
             sfp_events = events.get('sfp')
             sfp_errors = events.get('sfp_error')
             return status, sfp_events, sfp_errors
-        except NotImplementedError:
-            pass
+        except (NotImplementedError, Exception):
+            return False, {}, None
     status, events = platform_sfputil.get_transceiver_change_event(timeout)
     return status, events, None
 
@@ -900,10 +918,10 @@ class CmisManagerTask(threading.Thread):
         self.namespaces = namespaces
 
     def log_notice(self, message):
-        helper_logger.log_notice("CMIS: {}".format(message))
+        helper_logger.log_notice("CMIS: {}".format(message), also_print_to_console=True)
 
     def log_error(self, message):
-        helper_logger.log_error("CMIS: {}".format(message))
+        helper_logger.log_error("CMIS: {}".format(message), also_print_to_console=True)
 
     def on_port_update_event(self, port_change_event):
         if port_change_event.event_type not in [port_change_event.PORT_SET, port_change_event.PORT_DEL]:
@@ -947,6 +965,8 @@ class CmisManagerTask(threading.Thread):
                 self.port_dict[lport]['host_tx_ready'] = port_change_event.port_dict['host_tx_ready']
             if 'admin_status' in port_change_event.port_dict:
                 self.port_dict[lport]['admin_status'] = port_change_event.port_dict['admin_status']
+            if 'media_interface_code' in port_change_event.port_dict:
+                self.port_dict[lport]['media_interface_code'] = port_change_event.port_dict['media_interface_code']
             if 'laser_freq' in port_change_event.port_dict:
                 self.port_dict[lport]['laser_freq'] = int(port_change_event.port_dict['laser_freq'])
             if 'tx_power' in port_change_event.port_dict:
@@ -988,7 +1008,20 @@ class CmisManagerTask(threading.Thread):
             speed = 1000
         return speed
 
-    def get_cmis_application_desired(self, api, host_lane_count, speed):
+    def get_configured_media_if_from_db(self, lport):
+        """
+        Return the media interface code configured by user in CONFIG_DB's PORT table
+        """
+        media_if = None
+        asic_index = self.port_mapping.get_asic_id_for_logical_port(lport)
+        port_tbl = self.xcvr_table_helper.get_cfg_port_tbl(asic_index)
+
+        found, port_info = port_tbl.get(lport)
+        if found and 'media_interface_code' in dict(port_info):
+            media_if = dict(port_info)['media_interface_code']
+        return media_if
+
+    def get_cmis_application_desired(self, api, host_lane_count, speed, media_if):
         """
         Get the CMIS application code that matches the specified host side configurations
 
@@ -999,6 +1032,8 @@ class CmisManagerTask(threading.Thread):
                 Number of lanes on the host side
             speed:
                 Integer, the port speed of the host interface
+            media_if:
+                String, the media interface code ID of SFF8024
 
         Returns:
             Integer, the transceiver-specific application code
@@ -1014,6 +1049,9 @@ class CmisManagerTask(threading.Thread):
                 continue
             if self.get_interface_speed(d.get('host_electrical_interface_id')) != speed:
                 continue
+            # when media_if is None, select appl_code only by host_lane_count and speed.
+            if media_if != None and d.get('module_media_interface_id') != media_if:
+                continue
             appl_code = c
             break
 
@@ -1293,7 +1331,10 @@ class CmisManagerTask(threading.Thread):
         return float(power)
 
     def get_host_tx_status(self, lport):
-        host_tx_ready = 'false'
+        # TODO: xcvrd doesn't take responsibility for the configuration of host_tx_ready.
+        # When implementing the function to configure the field,
+        # restore to the original default value.
+        host_tx_ready = 'true'
 
         asic_index = self.port_mapping.get_asic_id_for_logical_port(lport)
         state_port_tbl = self.xcvr_table_helper.get_state_port_tbl(asic_index)
@@ -1436,6 +1477,11 @@ class CmisManagerTask(threading.Thread):
                 if pport < 0 or speed == 0 or len(lanes) < 1 or subport < 0:
                     continue
 
+                # Always get configured media_if from CONFIG_DB,
+                # to enable user to select appl_code also when the user sets only speed and lanes.
+                self.port_dict[lport]['media_interface_code'] = self.get_configured_media_if_from_db(lport)
+                media_if = self.port_dict[lport]['media_interface_code']
+
                 # Desired port speed on the host side
                 host_speed = speed
                 host_lane_count = len(lanes.split(','))
@@ -1504,7 +1550,7 @@ class CmisManagerTask(threading.Thread):
                     # CMIS state transitions
                     if state == self.CMIS_STATE_INSERTED:
                         self.port_dict[lport]['appl'] = self.get_cmis_application_desired(api,
-                                                                host_lane_count, host_speed)
+                                                                host_lane_count, host_speed, media_if)
                         if self.port_dict[lport]['appl'] < 1:
                             self.log_error("{}: no suitable app for the port appl {} host_lane_count {} "
                                             "host_speed {}".format(lport, appl, host_lane_count, host_speed))
@@ -2452,12 +2498,12 @@ class DaemonXcvrd(daemon_base.DaemonBase):
             # in this sense, we treat it as a part of new platform api.
             # we have already moved sfputil to sonic_platform_base
             # which is the root of new platform api.
-            platform_sfputil = sonic_platform_base.sonic_sfp.sfputilhelper.SfpUtilHelper()
+            # platform_sfputil = sonic_platform_base.sonic_sfp.sfputilhelper.SfpUtilHelper()
         except Exception as e:
             self.log_warning("Failed to load chassis due to {}".format(repr(e)))
 
         # Load platform specific sfputil class
-        if platform_chassis is None or platform_sfputil is None:
+        if platform_chassis is None:
             try:
                 platform_sfputil = self.load_platform_util(PLATFORM_SPECIFIC_MODULE_NAME, PLATFORM_SPECIFIC_CLASS_NAME)
             except Exception as e:
